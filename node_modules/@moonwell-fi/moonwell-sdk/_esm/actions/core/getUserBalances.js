import { Amount, getEnvironmentsFromArgs } from "../../common/index.js";
import { findTokenByAddress } from "../../environments/utils/index.js";
export async function getUserBalances(client, args) {
    const { userAddress } = args;
    const environments = getEnvironmentsFromArgs(client, args);
    const environmentsTokensBalances = await Promise.all(environments.map((environment) => {
        return Promise.all([
            environment.contracts.views?.read.getTokensBalances([
                Object.values(environment.config.tokens).map((token) => token.address),
                userAddress,
            ]),
        ]);
    }));
    const result = environments.flatMap((env, index) => {
        const balances = environmentsTokensBalances[index][0];
        const userBalances = balances
            .map((balance) => {
            const token = findTokenByAddress(env, balance.token);
            if (token) {
                const result = {
                    chainId: env.chainId,
                    account: userAddress,
                    token,
                    tokenBalance: new Amount(balance.amount, token.decimals),
                };
                return result;
            }
            else {
                return;
            }
        })
            .filter((item) => item !== undefined);
        return userBalances;
    });
    return result;
}
//# sourceMappingURL=getUserBalances.js.map