import { Amount, getEnvironmentFromArgs } from "../../common/index.js";
import { publicEnvironments, } from "../../environments/index.js";
export async function getUserVoteReceipt(client, args) {
    let { proposalId, userAddress } = args;
    const environment = getEnvironmentFromArgs(client, args);
    if (!environment) {
        return [];
    }
    let isMultichain = false;
    if (environment.contracts.multichainGovernor) {
        if (environment.custom?.governance?.proposalIdOffset) {
            if (proposalId > environment.custom?.governance?.proposalIdOffset) {
                isMultichain = true;
                proposalId =
                    proposalId - environment.custom?.governance?.proposalIdOffset;
            }
        }
    }
    const result = [];
    if (isMultichain) {
        const governanceChainIds = environment.custom?.governance?.chainIds || [];
        const receipt = await environment.contracts.multichainGovernor?.read.getReceipt([
            BigInt(proposalId),
            userAddress,
        ]);
        const [hasVoted, voteValue, votes] = receipt || [false, 0, 0];
        result.push({
            chainId: environment.chainId,
            proposalId,
            account: userAddress,
            option: voteValue,
            voted: hasVoted,
            votes: new Amount(votes || 0, 18),
        });
        for (const chainId of governanceChainIds) {
            const multichainEnvironment = Object.values(publicEnvironments).find((r) => r.chainId === chainId);
            if (multichainEnvironment) {
                const receipt = await multichainEnvironment.contracts.voteCollector?.read.getReceipt([
                    BigInt(proposalId),
                    userAddress,
                ]);
                const [hasVoted, voteValue, votes] = receipt || [false, 0, 0];
                result.push({
                    chainId: environment.chainId,
                    proposalId,
                    account: userAddress,
                    option: voteValue,
                    voted: hasVoted,
                    votes: new Amount(votes || 0, 18),
                });
            }
        }
    }
    else {
        const receipt = await environment.contracts.governor?.read.getReceipt([
            BigInt(proposalId),
            userAddress,
        ]);
        result.push({
            chainId: environment.chainId,
            proposalId,
            account: userAddress,
            option: receipt?.voteValue || 0,
            voted: receipt?.hasVoted || false,
            votes: new Amount(receipt?.votes || 0, 18),
        });
    }
    return result;
}
//# sourceMappingURL=getUserVoteReceipt.js.map