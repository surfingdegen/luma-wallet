"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMorphoVaultsRewards = exports.getMorphoVaultsData = void 0;
const viem_1 = require("viem");
const amount_js_1 = require("../../../common/amount.js");
;
const graphql_js_1 = require("../utils/graphql.js");
const math_js_1 = require("../utils/math.js");
async function getMorphoVaultsData(params) {
    const { environments } = params;
    const environmentsWithVaults = environments.filter((environment) => Object.keys(environment.vaults).length > 0 &&
        environment.contracts.morphoViews);
    const environmentsVaultsInfo = await Promise.all(environmentsWithVaults.map((environment) => {
        const vaultsAddresses = Object.values(environment.vaults)
            .map((v) => v.address)
            .filter((address) => params.vaults
            ? params.vaults
                .map((id) => id.toLowerCase())
                .includes(address.toLowerCase())
            : true);
        return environment.contracts.morphoViews?.read.getVaultsInfo([
            vaultsAddresses,
        ]);
    }));
    const result = environmentsWithVaults.reduce((aggregator, environment, environmentIndex) => {
        const environmentVaultsInfo = environmentsVaultsInfo[environmentIndex];
        const vaults = environmentVaultsInfo.map((vaultInfo) => {
            const vaultKey = Object.keys(environment.config.tokens).find((key) => {
                return (environment.config.tokens[key].address.toLowerCase() ===
                    vaultInfo.vault.toLowerCase());
            });
            const vaultToken = environment.config.tokens[vaultKey];
            const vaultConfig = environment.config.vaults[vaultKey];
            const underlyingToken = environment.config.tokens[vaultConfig.underlyingToken];
            const underlyingPrice = new amount_js_1.Amount(vaultInfo.underlyingPrice, 18);
            const vaultSupply = new amount_js_1.Amount(vaultInfo.totalSupply, vaultToken.decimals);
            const totalSupply = new amount_js_1.Amount(vaultInfo.totalAssets, underlyingToken.decimals);
            const totalSupplyUsd = totalSupply.value * underlyingPrice.value;
            const performanceFee = new amount_js_1.Amount(vaultInfo.fee, 18).value;
            const timelock = Number(vaultInfo.timelock) / (60 * 60);
            let ratio = 0n;
            const markets = vaultInfo.markets.map((vaultMarket) => {
                ratio += (0, math_js_1.wMulDown)(vaultMarket.marketApy, vaultMarket.vaultSupplied);
                const totalSupplied = new amount_js_1.Amount(vaultMarket.vaultSupplied, underlyingToken.decimals);
                const totalSuppliedUsd = totalSupplied.value * underlyingPrice.value;
                const allocation = totalSupplied.value / totalSupply.value;
                const marketLoanToValue = new amount_js_1.Amount(vaultMarket.marketLltv, 18).value * 100;
                const marketApy = new amount_js_1.Amount(vaultMarket.marketApy, 18).value * 100;
                let marketLiquidity = new amount_js_1.Amount(vaultMarket.marketLiquidity, underlyingToken.decimals);
                let marketLiquidityUsd = marketLiquidity.value * underlyingPrice.value;
                if (vaultMarket.marketCollateral === viem_1.zeroAddress) {
                    marketLiquidity = totalSupplied;
                    marketLiquidityUsd = totalSuppliedUsd;
                }
                const mapping = {
                    marketId: vaultMarket.marketId,
                    allocation,
                    marketApy,
                    marketCollateral: {
                        address: vaultMarket.marketCollateral,
                        decimals: 0,
                        name: vaultMarket.marketCollateralName,
                        symbol: vaultMarket.marketCollateralSymbol,
                    },
                    marketLiquidity,
                    marketLiquidityUsd,
                    marketLoanToValue,
                    totalSupplied,
                    totalSuppliedUsd,
                    rewards: [],
                };
                return mapping;
            });
            const avgSupplyApy = (0, math_js_1.mulDivDown)(ratio, math_js_1.WAD - vaultInfo.fee, vaultInfo.totalAssets === 0n ? 1n : vaultInfo.totalAssets);
            const baseApy = new amount_js_1.Amount(avgSupplyApy, 18).value * 100;
            let totalLiquidity = new amount_js_1.Amount(markets.reduce((acc, curr) => acc + curr.marketLiquidity.exponential, 0n), underlyingToken.decimals);
            let totalLiquidityUsd = markets.reduce((acc, curr) => acc + curr.marketLiquidityUsd, 0);
            if (totalLiquidity.value > totalSupply.value) {
                totalLiquidity = totalSupply;
                totalLiquidityUsd = totalSupplyUsd;
            }
            const mapping = {
                chainId: environment.chainId,
                vaultToken,
                underlyingToken,
                underlyingPrice: underlyingPrice.value,
                baseApy,
                totalApy: baseApy,
                curators: [],
                performanceFee,
                timelock,
                totalLiquidity,
                totalLiquidityUsd,
                totalSupplyUsd,
                totalSupply,
                vaultSupply,
                markets: markets,
                rewards: [],
            };
            return mapping;
        });
        return {
            ...aggregator,
            [environment.chainId]: vaults,
        };
    }, {});
    if (params.includeRewards === true) {
        const vaults = Object.values(result).flat();
        const rewards = await getMorphoVaultsRewards(vaults);
        vaults.forEach((vault) => {
            const vaultRewards = rewards.find((reward) => reward.vaultToken.address === vault.vaultToken.address &&
                reward.chainId === vault.chainId);
            vault.rewards =
                vaultRewards?.rewards
                    .filter((reward) => reward.marketId === undefined)
                    .map((reward) => ({
                    asset: reward.asset,
                    supplyApr: reward.supplyApr,
                    supplyAmount: reward.supplyAmount,
                    borrowApr: reward.borrowApr,
                    borrowAmount: reward.borrowAmount,
                })) || [];
            vault.markets.forEach((market) => {
                const marketRewards = vaultRewards?.rewards
                    .filter((reward) => reward.marketId === market.marketId)
                    .map((reward) => ({
                    asset: reward.asset,
                    supplyApr: reward.supplyApr,
                    supplyAmount: reward.supplyAmount,
                    borrowApr: reward.borrowApr,
                    borrowAmount: reward.borrowAmount,
                })) || [];
                market.rewards = marketRewards;
                market.rewards.forEach((reward) => {
                    const supplyApr = reward.supplyApr * (market.allocation / 100);
                    const supplyAmount = reward.supplyAmount * (market.allocation / 100);
                    const vaultReward = vault.rewards.find((r) => r.asset.address === reward.asset.address);
                    if (vaultReward) {
                        vaultReward.supplyApr += supplyApr;
                        vaultReward.supplyAmount += supplyAmount;
                    }
                    else {
                        vault.rewards.push({
                            asset: reward.asset,
                            supplyApr,
                            supplyAmount,
                            borrowApr: 0,
                            borrowAmount: 0,
                        });
                    }
                });
            });
            vault.totalApy =
                vault.rewards.reduce((acc, curr) => acc + curr.supplyApr, 0) +
                    vault.baseApy;
        });
    }
    return environments.flatMap((environment) => {
        return result[environment.chainId] || [];
    });
}
exports.getMorphoVaultsData = getMorphoVaultsData;
async function getMorphoVaultsRewards(vaults) {
    const query = `
  {
    vaults(
      where: { address_in: [${vaults.map((vault) => `"${vault.vaultToken.address}"`).join(",")}], chainId_in: [${vaults.map((vault) => vault.chainId).join(",")}] }
    ) {
      items {
        chain {
          id
        }
        id
        address
        asset {
          priceUsd
        }
        state {
          rewards {
            asset {
              address
              symbol,
                decimals
              name
            }
            supplyApr
            amountPerSuppliedToken
          }
        }
      }
    }
    marketPositions(
      where: { userAddress_in: [${vaults.map((vault) => `"${vault.vaultToken.address}"`).join(",")}], chainId_in: [${vaults.map((vault) => vault.chainId).join(",")}] }
    ) {
      items {
        user {
          address
        }
        market {
          morphoBlue {
            chain {
              id
            }
          }
          uniqueKey
          loanAsset {
            priceUsd
          }
          state {
            rewards {
              asset {
                address
                symbol
                decimals
                name
              }
              supplyApr
              amountPerSuppliedToken
            }
          }
        }
      }
    }
  } `;
    const result = await (0, graphql_js_1.getGraphQL)(query);
    if (result) {
        try {
            const marketsRewards = result.marketPositions.items.flatMap((item) => {
                const rewards = (item.market.state?.rewards || []).map((reward) => {
                    const tokenAmountPer1000 = (Number.parseFloat(reward.amountPerSuppliedToken) /
                        item.market.loanAsset.priceUsd) *
                        1000 || "0";
                    const tokenDecimals = 10 ** reward.asset.decimals;
                    const amount = Number(tokenAmountPer1000) / tokenDecimals;
                    return {
                        chainId: item.market.morphoBlue.chain.id,
                        vaultId: item.user.address,
                        marketId: item.market.uniqueKey,
                        asset: reward.asset,
                        supplyApr: reward.supplyApr || 0 * 100,
                        supplyAmount: amount,
                        borrowApr: 0,
                        borrowAmount: 0,
                    };
                });
                return rewards;
            });
            const vaultsRewards = result.vaults.items.flatMap((item) => {
                return (item.state?.rewards || []).map((reward) => {
                    const tokenAmountPer1000 = (Number.parseFloat(reward.amountPerSuppliedToken) /
                        item.asset.priceUsd) *
                        1000 || "0";
                    const tokenDecimals = 10 ** reward.asset.decimals;
                    const amount = Number(tokenAmountPer1000) / tokenDecimals;
                    return {
                        chainId: item.chain.id,
                        vaultId: item.address,
                        marketId: undefined,
                        asset: reward.asset,
                        supplyApr: (reward.supplyApr || 0) * 100,
                        supplyAmount: amount,
                        borrowApr: 0,
                        borrowAmount: 0,
                    };
                });
            });
            const rewards = [...marketsRewards, ...vaultsRewards];
            return vaults.map((vault) => {
                return {
                    chainId: vault.chainId,
                    vaultToken: vault.vaultToken,
                    rewards: rewards
                        .filter((reward) => reward.vaultId === vault.vaultToken.address &&
                        reward.chainId === vault.chainId)
                        .map((reward) => {
                        return {
                            marketId: reward.marketId,
                            asset: reward.asset,
                            supplyApr: reward.supplyApr,
                            supplyAmount: reward.supplyAmount,
                            borrowApr: reward.borrowApr,
                            borrowAmount: reward.borrowAmount,
                        };
                    }),
                };
            });
        }
        catch (ex) {
            return vaults.map((vault) => {
                return {
                    chainId: vault.chainId,
                    vaultToken: vault.vaultToken,
                    rewards: [],
                };
            });
        }
    }
    else {
        return vaults.map((vault) => {
            return {
                chainId: vault.chainId,
                vaultToken: vault.vaultToken,
                rewards: [],
            };
        });
    }
}
exports.getMorphoVaultsRewards = getMorphoVaultsRewards;
//# sourceMappingURL=common.js.map